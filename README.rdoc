== README

This is a demo of the prototype for Buzzboard a project co-designed at a Noob-Hack

Here are the steps I used to make it and I'll add more as I go, along with some considerations.
If there anything that doesn't make sense or something you could add please feel free to edit this readme.
Please note that this is using Linux and instructions may differ

Part 1 setting up your machine
 - Create a Github Account
 - Ensure rails and ruby are installed and at the latest version
  - ruby -v
   - in the command line gives you ruby 1.9.3p194 (2012-04-20 revision 35410) [x86_64-linux]
   - if not see https://www.ruby-lang.org/en/downloads/   for install instructions
  - rails -v
    - in the command line should give you Rails 4.0.2
    - if not run sudo gem install rails
 - Anytime if you're not sure what to write in the command line you can type --help
    - example "rails --help" "rails new --help"
    - and it will give you a list of options and explanations
 - Anytime if you want to check your progress in your browser run this in the command line:
   - rails server
  - Then go to this in your browser
   - http://localhost:3000/

Part 2 creating a project in Rails - Buzzboard
 - Create a repo in github
 - In the command line write:
  - rails new buzzboard 
   - note that 'buzzboard' is the name of the project, this could be anything
   - this creates a folder called buzzboard and many files
  - cd buzzboard
   - important to move into the right folder for this
  - Follow the instructions in your new git repo (may have to refresh the page, should be similar to this)
   - git init
   - git add .
   - git commit . -m "started buzzboard project"
   - git remote add github ...(uri from github got here, not I used github instead of origin)
   - git push -u github master
 - Can check this out in in the browser by running the server, look through some files in sublime text and githhub
 
Part 3 adding "topics" and "users" to Buzzboard
 - Part of our brainstorming meant we wanted topics as a feature in our project. Each topic should have:
  - Title, interest(teaching/learning) and a longer description
  - Please note rails is case sensitive and sensitive to pluralisation, please try to follow the patterns in the exampls given

Part A beginners:
 - Rails can generate the code, files and database for this using these commands on the command line. This method is used primarily in tutorials and when first learning rails.
  - rails generate scaffold topic title interest body:text
   - after the scaffold should go the name (topic) then what features it has
   - note by default all features are "strings" if you add :text it gives it the type text so you can type more in
  - rake db:migrate
   - this creates the database we'll be using need to redo this everytime you start it on a new computer or change the migration file
 - You can now see this page in the browser http://localhost:3000/topics (ensure your rails server is still going)
 - Rememeber to save your changes regulary by typing this into the console
    - git add .
    - git commit . -am "added topic scaffold"

Part B intermediate:
 - Next we will create the user model. You can do this using the following steps or by repeating part A but with "rails generate scaffold user name email password" instead. 
 - This uses the model, view, controller method. We'll be generating them each individually instead of all at once as in option A. This develops a deeper understanding and more authentic rails experience.
  - rails generate model user name email password
   - This generates the model which is used to generate and access the database
  - rake db:migrate
 - Rememeber to save your changes regulary by typing this into the console
    - git add .
    - git commit . -am "added user model"
 - rails generate controller Users show index new edit create update destroy
  - this starts the controller off with the 7 standard controller actions. It also creates view files for each one
    - git add .
    - git commit . -am "added user controller"
 - You can now see this page in the browser http://localhost:3000/users, they will currently be empty
 - Now you can go into your text editor and start coding your user controller and user views files. Use the topics files already generate by the scaffold as a guide. 

Extras
You can test out your new classes using ruby on the command line
 -rails console
  - Opens up a ruby console to type and test commands
  - ctrl d to quit
 -dog = Topic.new(title:"Dogs", interest:"learn", body:"I would like to learn more about dogs")
  - should set up a new topic about dogs
 -dog.save
  - this will save your topic to the database, which you'll be able to see when you refresh your browser